@page "/study-cards"
@using StudyCardsGenerator.Models
@using StudyCardsGenerator.Services
@using StudyCardsGenerator.Attributes
@attribute [RequireAuthentication]
@implements IDisposable

@inject NavigationManager NavigationManager
@inject IStudyCardService StudyCardService
@inject StudyCardsStateContainer StateContainer

<PageTitle>Study Cards Deck - @_title</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 p-8">
    <div class="max-w-6xl mx-auto">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-white mb-2">@_title</h1>
            <p class="text-xl text-white mb-4">Review and learn from your AI-generated study cards</p>
            <button @onclick="ToggleAllAnswers"
                class="bg-white text-purple-600 hover:bg-purple-100 font-bold py-2 px-4 rounded">
                @(_areAllAnswersVisible ? "Hide All Answers" : "Show All Answers")
            </button>
        </header>

        @if (!_cards.Any())
        {
            <div class="text-center text-white">
                <p class="text-xl mb-4">No study cards available.</p>
                <button @onclick="NavigateToHome"
                    class="bg-white text-purple-600 hover:bg-purple-100 font-bold py-2 px-4 rounded">
                    Generate Study Cards
                </button>
            </div>
        }
        else
        {
            <div class="grid grid-cols-3 gap-6 h-[calc(100vh-16rem)] overflow-y-auto pr-4">
                @foreach (var card in _cards)
                {
                    <div class="bg-white rounded-lg shadow-md overflow-hidden flex flex-col h-80">
                        <div class="p-6 flex-grow">
                            <h3 class="text-lg font-semibold mb-4">@card.Question</h3>
                            @if (card.IsAnswerVisible)
                            {
                                <p class="text-gray-600">@card.Answer</p>
                            }
                        </div>
                        <div class="bg-gray-100 px-6 py-4 mt-auto">
                            <button @onclick="() => ToggleCardVisibility(card)"
                                class="text-purple-600 hover:text-purple-800 font-medium">
                                @(card.IsAnswerVisible ? "Hide Answer" : "Show Answer")
                            </button>
                        </div>
                    </div>
                }
            </div>

            <div class="mt-8 text-center">
                <button @onclick="NavigateToHome"
                    class="bg-white text-purple-600 hover:bg-purple-100 font-bold py-2 px-4 rounded">
                    Generate More Cards
                </button>
            </div>
        }
    </div>
</div>

@code {
    private List<StudyCard> _cards = new();
    private string _title = "My Study Set";
    private bool _areAllAnswersVisible = true;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            StateContainer.OnChange += StateHasChanged;
            
            _cards = await StateContainer.GetCurrentCardsAsync();
            _title = await StateContainer.GetCurrentSetTitleAsync();
            
            if (!_cards.Any())
            {
                NavigateToHome();
                return;
            }

            // Set initial visibility state
            _areAllAnswersVisible = _cards.All(card => card.IsAnswerVisible);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error initializing study cards: {ex.Message}");
            NavigateToHome();
        }
        finally
        {
            _isLoading = false;
        }
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

    private async Task ToggleCardVisibility(StudyCard card)
    {
        try
        {
            card.IsAnswerVisible = !card.IsAnswerVisible;
            await StateContainer.SetCurrentCardsAsync(_cards);
            UpdateGlobalVisibilityState();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error toggling card visibility: {ex.Message}");
        }
    }

    private async Task ToggleAllAnswers()
    {
        try
        {
            _areAllAnswersVisible = !_areAllAnswersVisible;
            foreach (var card in _cards)
            {
                card.IsAnswerVisible = _areAllAnswersVisible;
            }
            await StateContainer.SetCurrentCardsAsync(_cards);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error toggling all answers: {ex.Message}");
            _areAllAnswersVisible = !_areAllAnswersVisible;
            StateHasChanged();
        }
    }

    private void UpdateGlobalVisibilityState()
    {
        _areAllAnswersVisible = _cards.All(card => card.IsAnswerVisible);
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}